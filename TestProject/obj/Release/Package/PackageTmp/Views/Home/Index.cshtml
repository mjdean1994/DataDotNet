@using DataDotNet;
@model DataDotNet.Models.BarChart
@{
    ViewBag.Title = "Home";
}

<div>
    

    <h2>Let's say there was a list of data points...</h2>
    <pre class="language-csharp">
<code>
        public ActionResult Index()
        {
            var bar = new BarChart();
            
            var Explorer = new WowDotNetAPI.WowExplorer(Region.US, Locale.en_US, "d6f48me7k79cqjtnhqqwzktqkjnc57g8");
            bar.Data =
                Explorer.GetGuild("wyrmrest-accord", "The Red Vanguard", GuildOptions.GetMembers)
                    .Members.Select(x => x.Character)
                    .GroupBy(x => x.Class)
                    .Select(sel => new BarChart.DataPoint
                    {
                        Label = sel.Key.ToString(),
                        Value = Convert.ToDouble(sel.Count()),
                        Color = GetClassColor(sel.Key)
                    }).OrderBy(x => x.Label).ToList();
            return View(bar);
        }
    </code>
    </pre>
    <h2>And let's say we passed them into an HtmlHelper extension...</h2>
    <pre class="language-csharp">
    <code>
                @@Html.BarChart(Model)
    </code>
    </pre>
    <h2>What if that got you this!</h2>
    @Html.BarChart(Model)
    <br/>
    <h2>Definitely beats writing and configuring ALL of this!</h2>
    <pre class="language-javascript">
        <code>
            var data = @{ WriteLiteral(Model.JsonData()); };
    
            var margin = { top: 20, right: 20, bottom: 20, left: 20 },
                width = parseInt(d3.select(".chart").style("width"), 10) - margin.left - margin.right,
                height = @Model.Height - margin.top - margin.bottom;
            var x = d3.scale.ordinal()
            .rangeRoundBands([0, width], .1)
            .domain(data.map(function (d) { return d.Label }));
            var color = d3.scale.category10();
            var y = d3.scale.linear()
                .range([height, 0])
                .domain([0, d3.max(data, function (d) { return d.Value })]);
            if (d3.max(data, function(d) { return d.Value }) < 8) {
                y.domain([0, 8]);
            }
            var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom");
            var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left");
            var chart = d3.select(".chart")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
            if ("@Model.ShowXAxis" == "True") {
                chart.append("g")
                 .attr("class", "x axis")
                 .attr("transform", "translate(0," + height + ")")
                 .call(xAxis); 
            }
    
            if ("@Model.ShowYAxis" == "True") {
                chart.append("g")
                  .attr("class", "y axis")
                  .call(yAxis);
            }
    
            chart.selectAll(".bar")
                .data(data)
                .enter().append("rect")
                .attr("class", "bar")
                .attr("x", function(d) { return x(d.Label); })
                .attr("y", function(d) { return y(d.Value); })
                .attr("height", function(d) { return height - y(d.Value); })
                .attr("width", x.rangeBand())
                .attr("fill", function(d, i) {
                    if (d.Color) {
                        return d.Color;
                    }
                    return color(i);
                });
            function resize() {
                // update width
                width = parseInt(d3.select('.chart').style('width'), 10);
                width = width - margin.left - margin.right;
                // resize the chart
                x.rangeRoundBands([0, width], .1);
                d3.select(".chart")
                    .attr("width", width + margin.left + margin.right);
        
                chart.selectAll(".bar")
                    .attr("width", x.rangeBand())
                    .attr("x", function(d) {return x(d.Label)});
                chart.select(".x.axis")
                    .call(xAxis); 
            }
            d3.select(window).on('resize', resize); 
        </code>
</pre>
    <pre class="language-css">
<code>
    .chart {
        width: 100%;
    }
     .axis text {
         font: 12px sans-serif;
         font-family: "Trebuchet MS";
     }
    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }
    .bar {
        box-shadow: 10px 10px 10px black;
    }
</code>
</pre>
    <h2>It's completely responsive and configurable, too! You can specify all the options for the chart right in the Controller, or leave the defaults and make a fully-functional chart in as little as two lines of code!</h2>
</div>